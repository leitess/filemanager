"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(6540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},9360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"frontend/testes-de-integra\xe7\xe3o","title":"Testes de Integra\xe7\xe3o","description":"Os testes de integra\xe7\xe3o, visam em verificar como o frontend e o backend podem se integrar. Para isso, n\xe3o ser\xe1","source":"@site/docs/frontend/testes-de-integra\xe7\xe3o.md","sourceDirName":"frontend","slug":"/frontend/testes-de-integra\xe7\xe3o","permalink":"/filemanager/docs/frontend/testes-de-integra\xe7\xe3o","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Pagina Principal","permalink":"/filemanager/docs/frontend/pagina-principal"},"next":{"title":"\ud83d\udccd Refer\xeancias","permalink":"/filemanager/docs/references"}}');var i=t(4848),s=t(8453);const o={sidebar_position:6},d="Testes de Integra\xe7\xe3o",r={},l=[{value:"Visualiza\xe7\xe3o de arquivos",id:"visualiza\xe7\xe3o-de-arquivos",level:2},{value:"Upload de um arquivo",id:"upload-de-um-arquivo",level:2},{value:"Edi\xe7\xe3o de metadados",id:"edi\xe7\xe3o-de-metadados",level:2},{value:"Exclus\xe3o de arquivos",id:"exclus\xe3o-de-arquivos",level:2},{value:"Download de um arquivo",id:"download-de-um-arquivo",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testes-de-integra\xe7\xe3o",children:"Testes de Integra\xe7\xe3o"})}),"\n",(0,i.jsx)(n.p,{children:"Os testes de integra\xe7\xe3o, visam em verificar como o frontend e o backend podem se integrar. Para isso, n\xe3o ser\xe1\nusado a API real, mas sim um mock dela, afim de simular o comportamento da funcionalidade e se est\xe1 conforme o\ncen\xe1rio definido anteriormente."}),"\n",(0,i.jsxs)(n.p,{children:["N\xe3o ser\xe1 mostrado todas as fun\xe7\xf5es que est\xe3o sendo chamadas e todos os algoritmos por tr\xe1s\ndessas fun\xe7\xf5es. Contudo, em suma o que acontece \xe9 que o componente (ou p\xe1gina), faz uso de\num hook, no qual usa a biblioteca ",(0,i.jsx)(n.code,{children:"axios"})," para poder realizar a requisi\xe7\xe3o (se comunicar)\ncom o backend. Por sua vez, no backend h\xe1 as rotas que chamam as controllers, as controllers\nchamam as services e as services chamam os repositories. De forma, linear a requisi\xe7\xe3o vai\ne a resposta v\xeam e permite renderizar os dados na p\xe1gina."]}),"\n",(0,i.jsx)(n.h2,{id:"visualiza\xe7\xe3o-de-arquivos",children:"Visualiza\xe7\xe3o de arquivos"}),"\n",(0,i.jsx)(n.p,{children:"O teste abaixo, visa acessar p\xe1gina de principal e realizar uma requisi\xe7\xe3o na endpoint:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GET"}),":",(0,i.jsx)(n.code,{children:"files/"})]}),"\n",(0,i.jsx)(n.p,{children:"E obt\xe9m todos os arquivos cadastrados:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="cypress/e2e/Home.page.spec.cy.ts"',children:"     cy.intercept('GET', '/files/', { fixture: 'files.json' }).as('getFiles');\n    cy.visit('/');\n\n    ...\n\n  it('when there are file then it renders a table', () => {\n    cy.wait('@getFiles');\n    cy.contains('documento.pdf').should('exist');\n    cy.contains('imagem.jpg').should('exist');\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:"O teste abaixo, verifica o comportamento do sistema, quando n\xe3o h\xe1 arquivos salvos no\nbackend."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when there are not files store then it tells that there are files saved', () => {\n    cy.intercept('GET', '/files/', []).as('emptyFiles');\n    cy.visit('/');\n    cy.wait('@emptyFiles');\n    cy.contains('N\xe3o h\xe1 arquivos cadastrados').should('exist');\n  });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"upload-de-um-arquivo",children:"Upload de um arquivo"}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 um teste quando o upload de um arquivo vai com sucesso:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when it sends a file then it is uploaded in backend', () => {\n    const fileName = 'test.txt';\n    const fileContent = 'Arquivo de teste';\n    const file = new File([fileContent], fileName, { type: 'text/plain' });\n\n    cy.intercept('POST', '/files/upload/start', {}).as('startUpload');\n    cy.intercept('POST', /\\/files\\/upload\\/chunk\\/.*/, {}).as('uploadChunk');\n    cy.intercept('POST', '/files/upload/complete', { body: { id: '123' } }).as('completeUpload');\n    cy.intercept('GET', '/files/123/download', {\n      statusCode: 200,\n      headers: {\n        'Content-Disposition': 'attachment; filename=\"test.txt\"',\n      },\n      body: new Blob(['Arquivo de teste'], { type: 'text/plain' }),\n    }).as('download');\n    cy.intercept('GET', '/files/', { fixture: 'files_after_upload.json' }).as('refreshFiles');\n\n    cy.get('input[type=\"file\"]').selectFile({ contents: file, fileName });\n    cy.contains('Enviar').click();\n\n    cy.wait('@startUpload');\n    cy.wait('@uploadChunk');\n    cy.wait('@completeUpload');\n    cy.wait('@download');\n    cy.wait('@refreshFiles');\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 um teste de integra\xe7\xe3o, onde o upload de um arquivo falhou:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when it sends a file then the upload failed', () => {\n    const fileName = 'erro.txt';\n    const fileContent = 'conte\xfado de teste';\n    const file = new File([fileContent], fileName, { type: 'text/plain' });\n\n    cy.intercept('POST', '/files/upload/start', {\n      statusCode: 500,\n      body: { message: 'Request failed with status code 500' }\n    }).as('uploadStartFail');\n\n    cy.get('input[type=\"file\"]').selectFile({ contents: file, fileName });\n    cy.contains('Enviar').click();\n\n    cy.wait('@uploadStartFail');\n\n    cy.contains('Request failed with status code 500').should('exist');\n  });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"edi\xe7\xe3o-de-metadados",children:"Edi\xe7\xe3o de metadados"}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 um exemplo de teste de integra\xe7\xe3o de edi\xe7\xe3o de metadados de um arquivo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when it edits file metadada then it store the new information', () => {\n    cy.wait('@getFiles');\n    \n    cy.intercept('PATCH', '**/files/1', {\n      statusCode: 200,\n      body: { filename: 'novo_nome.pdf', mimetype: 'application/pdf' },\n    }).as('editFile');\n\n    cy.contains('documento.pdf').should('exist').then(($el) => {\n      cy.wrap($el).closest('tr').within(() => {\n        cy.contains('Editar').click();\n        cy.get('[data-testid=\"filename-edit-1\"]').clear().type('novo_nome.pdf');\n        cy.get('[data-testid=\"mimetype-edit-1\"]').clear().type('application/pdf');\n        cy.contains('Salvar').click();\n      });\n    });\n  \n  \n    cy.wait('@editFile');\n  });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"exclus\xe3o-de-arquivos",children:"Exclus\xe3o de arquivos"}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 um teste que visa excluir um determinado arquivo da tabela:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when it delete a file then it is remove from backend and table', () => {\n    cy.wait('@getFiles');\n\n    cy.intercept('DELETE', '/files/1', {}).as('deleteFile');\n    cy.intercept('GET', '/files/', { fixture: 'files_after_delete.json' }).as('refreshFiles');\n\n    cy.contains('documento.pdf').parent().within(() => {\n      cy.contains('Excluir').click();\n    });\n\n    cy.wait('@deleteFile');\n    cy.wait('@refreshFiles');\n  });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"download-de-um-arquivo",children:"Download de um arquivo"}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 o download de um arquivo:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when there are a file in table then it can be downloaded', () => {\n    cy.wait('@getFiles');\n\n    cy.intercept('GET', '/files/1/download', {\n      statusCode: 200,\n      headers: {\n        'Content-Disposition': 'attachment; filename=\"documento.pdf\"',\n      },\n      body: new Blob(['%PDF-1.4 ...'], { type: 'application/pdf' }),\n    }).as('downloadFile');\n\n    cy.contains('documento.pdf').parent().within(() => {\n      cy.contains('Baixar').click();\n    });\n\n    cy.wait('@downloadFile');\n  });\n"})}),"\n",(0,i.jsx)(n.p,{children:"Abaixo est\xe1 o primeiro teste de integra\xe7\xe3o que falhou, mostrando que deve ser necessario\nrefatorar o hook para melhor tratamento de erros de requisi\xe7\xe3o:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title=""',children:"  it('when there are files store then a download of a file failed', () => {\n    Cypress.on('uncaught:exception', (err, runnable) => {\n      if (err.message.includes(\"Cannot read properties of undefined\")) {\n        return false;\n      }\n    \n      return true;\n    });\n    cy.wait('@getFiles');\n\n    cy.intercept('GET', '/files/1/download', {\n      statusCode: 500,\n      headers: {\n        'Content-Disposition': 'attachment; filename=\"documento.pdf\"',\n      },\n      body: { message: 'Request failed with status code 500' }\n    }).as('downloadFail');\n\n    cy.contains('documento.pdf').parent().within(() => {\n      cy.contains('Baixar').click();\n    });\n\n    cy.wait(5000);\n    cy.wait('@downloadFail');\n\n    cy.contains('Request failed with status code 500').should('exist');\n  });\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);